
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum OrganizationRole {
  OWNER
  ADMIN
  MANAGER
  EMPLOYEE
}

enum OrganizationMemberStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
}

enum ClientType {
  INDIVIDUAL
  CORPORATE
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  PROSPECT
  SUSPENDED
}

model Post {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title   String
  content String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)

  @@map("posts")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name          String
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  role          UserRole  @default(USER)
  banned        Boolean?  @default(false)
  banReason     String?
  banExpires    DateTime?

  sessions Session[]
  accounts Account[]
  posts    Post[]

  // Relacionamentos com organizações (apenas para usuários internos)

  organizationMemberships OrganizationMember[]
  ownedOrganizations      Organization[]       @relation("OrganizationOwner")
  OrganizationInvite      OrganizationInvite[]

  @@map("users")
}

model Organization {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  slug        String  @unique
  description String?
  website     String?
  logo        String?

  // Configurações da organização
  isActive   Boolean @default(true)
  maxMembers Int?    @default(50)
  maxClients Int?    @default(1000)

  // Endereço
  address String?
  city    String?
  state   String?
  country String?
  zipCode String?
  invites OrganizationInvite[]

  // Owner da organização
  ownerId String
  owner   User   @relation("OrganizationOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  // Relacionamentos
  members OrganizationMember[]
  invoices Invoice[]
  clients Client[]
  posts   Post[]

  @@map("organizations")
}

model OrganizationInvite {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email     String
  role      OrganizationRole
  token     String           @unique
  expiresAt DateTime

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  invitedBy     String
  invitedByUser User   @relation(fields: [invitedBy], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([token])
  @@index([organizationId])
  @@map("organization_invites")
}

model OrganizationMember {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role   OrganizationRole         @default(EMPLOYEE)
  status OrganizationMemberStatus @default(PENDING)

  // Data de entrada e saída
  joinedAt DateTime?
  leftAt   DateTime?

  // Informações específicas do funcionário
  title      String? // Cargo/Posição
  department String?
  salary     String?
  hourlyRate String?

  // Permissões específicas
  canManageClients  Boolean @default(false)
  canViewReports    Boolean @default(false)
  canManageProjects Boolean @default(false)

  // Relacionamentos
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Índices para performance
  @@unique([userId, organizationId])
  @@index([organizationId, role])
  @@index([organizationId, status])
  @@map("organization_members")
}

model Client {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Informações básicas
  name   String
  email  String?
  phone  String?
  status ClientStatus @default(PROSPECT)
  type   ClientType   @default(INDIVIDUAL)

  // Para pessoa física
  cpf       String?
  birthDate DateTime?

  // Para pessoa jurídica
  cnpj        String?
  companyName String?
  tradeName   String?
  website     String?

  // Endereço
  address String?
  city    String?
  state   String?
  country String?
  zipCode String?

  // Informações comerciais
  contractValue Decimal?  @db.Decimal(12, 2)
  contractStart DateTime?
  contractEnd   DateTime?
  paymentTerms  String? // "30 days", "60 days", etc.
  creditLimit   Decimal?  @db.Decimal(10, 2)

  // Informações adicionais
  notes String?
  tags  String[] // Array de tags para categorização

  // Relacionamento com organização
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Relacionamentos
  invoices Invoice[]

  @@index([organizationId, status])
  @@index([organizationId, type])
  @@index([email])
  @@index([cpf])
  @@index([cnpj])
  @@map("clients")
}



model Invoice {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  invoiceNumber String    @unique
  amount       String?
  dueDate       DateTime
  paidDate      DateTime?
  status        String    @default("PENDING") // PENDING, PAID, OVERDUE, CANCELLED

  invoiceItems InvoiceItem[]

  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([clientId, status])
  @@index([dueDate])
  @@map("invoices")
}

model InvoiceItem {
  id        String   @id @default(uuid())
    createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  name String
  model String
  brand String
  color String?
  ocurrenceDescription String?
  acessories String?

  status        String    @default("PENDING") // PENDING, PAID, OVERDUE, CANCELLED
  technicalResponsible String?
  amount        String?


  invoiceId String
  invoice  Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  expiresAt      DateTime
  token          String   @unique
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Verification {
  id        String    @id @default(uuid())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  identifier String
  value      String
  expiresAt  DateTime

  @@map("verifications")
}
